{"version":3,"sources":["components/flipping-card/FlippingCardBack.jsx","components/flipping-card/FlippingCardFront.jsx","components/card/Card.jsx","components/landing-page/LandingPage.jsx","components/app/App.js","serviceWorker.js","index.js"],"names":["FlippingCardBack","className","hint","this","props","songName","label","disabled","containerClass","icon","color","green","artistName","labelId","inputSongName","songSimilarity","inputArtistName","artistSimilarity","onClick","toggleFlip","Component","FlippingCardFront","state","handleChange","bind","handleSubmit","event","setState","target","name","value","console","log","setUserInput","src","item","album","images","url","waves","LinearProgress","variant","progress_ms","duration_ms","onChange","Card","flipped","_songName","_artistName","calculateSimilar","artists","input","dict","letter","actual","undefined","sum","dif","actualDict","countLetters","toLowerCase","inputDict","JSON","stringify","Object","entries","key","Math","abs","round","style","display","alignItems","justifyContent","LandingPage","token","is_playing","getCurrentlyPlaying","getSpotifyAPI","interval","setInterval","clearInterval","axios","create","baseURL","headers","Authorization","get","then","response","status","data","catch","error","paddingTop","React","App","useState","spotifyAuthToken","setSpotifyAuthToken","getSpotifyAuthToken","Cookies","useEffect","exact","path","redirectUri","clientID","scopes","Scopes","userReadCurrentlyPlaying","gradient","remove","window","location","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.20ab005a.chunk.js","sourcesContent":["import { green } from \"@material-ui/core/colors\";\r\nimport { MDBBtn, MDBCardBody, MDBInput } from \"mdbreact\";\r\nimport PropTypes from \"prop-types\";\r\nimport React, { Component } from \"react\";\r\nimport \"./FlippingCard.css\";\r\nclass FlippingCardBack extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"back\">\r\n        Back Side\r\n        <MDBCardBody>\r\n          <MDBInput\r\n            hint={this.props.songName}\r\n            className=\"whiteText\"\r\n            label=\"Song Name\"\r\n            disabled={true}\r\n            containerClass=\"text-left\"\r\n            icon=\"music\"\r\n            color={green}\r\n          />\r\n          <MDBInput\r\n            hint={this.props.artistName}\r\n            className=\"whiteText\"\r\n            label=\"Artist Name\"\r\n            labelId=\"artist\"\r\n            icon=\"user\"\r\n            disabled={true}\r\n            containerClass=\"text-left\"\r\n          />\r\n          <MDBInput\r\n            hint={\r\n              this.props.inputSongName !== \"\"\r\n                ? this.props.inputSongName\r\n                : \"NO SONG INPUTTED\"\r\n            }\r\n            className=\"whiteText\"\r\n            label={\r\n              \"Your Song Guess \" +\r\n              this.props.songSimilarity +\r\n              \"% similar\"\r\n            }\r\n            labelId=\"artist\"\r\n            icon=\"music\"\r\n            disabled={true}\r\n            containerClass=\"text-left\"\r\n          />\r\n\r\n          <MDBInput\r\n            hint={\r\n              this.props.inputArtistName !== \"\"\r\n                ? this.props.inputArtistName\r\n                : \"NO ARTIST INPUTTED\"\r\n            }\r\n            className=\"whiteText\"\r\n            label={\r\n              \"Your Artist Guess \" +\r\n              this.props.artistSimilarity +\r\n              \"% similar\"\r\n            }\r\n            labelId=\"artist\"\r\n            icon=\"user\"\r\n            disabled={true}\r\n            containerClass=\"text-left\"\r\n          />\r\n        </MDBCardBody>\r\n        <button\r\n          onClick={this.props.toggleFlip}\r\n          className=\"buttonClass\"\r\n        >\r\n          Back\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nFlippingCardBack.propTypes = {\r\n  toggleFlip: PropTypes.func,\r\n  artistName: PropTypes.string,\r\n  songName: PropTypes.string,\r\n  inputArtistName: PropTypes.string,\r\n  inputSongName: PropTypes.string,\r\n  artistSimilarity: PropTypes.number,\r\n  songSimilarity: PropTypes.number\r\n};\r\nexport default FlippingCardBack;\r\n","import { LinearProgress } from \"@material-ui/core\";\r\nimport { MDBBtn, MDBCard, MDBCardBody, MDBCardImage, MDBInput } from \"mdbreact\";\r\nimport PropTypes from \"prop-types\";\r\nimport React, { Component } from \"react\";\r\nimport \"./FlippingCard.css\";\r\nclass FlippingCardFront extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { songName: \"\", artistName: \"\" };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  handleChange(event) {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n    console.log(event.target.name + \" \" + event.target.value);\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    this.props.toggleFlip();\r\n    this.props.setUserInput(this.state.songName, this.state.artistName);\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <MDBCard className=\"front\">\r\n        <MDBCardImage\r\n          className=\"img-fluid\"\r\n          src={this.props.item.album.images[0].url}\r\n          waves\r\n        />\r\n        <LinearProgress\r\n          variant=\"determinate\"\r\n          value={(this.props.progress_ms * 100) / this.props.item.duration_ms}\r\n        />\r\n        <MDBCardBody>\r\n          <MDBInput\r\n            name=\"songName\"\r\n            value={this.state.songName}\r\n            onChange={this.handleChange}\r\n            className=\"whiteText\"\r\n            label=\"Guess the song!\"\r\n          />\r\n          <MDBInput\r\n            name=\"artistName\"\r\n            value={this.state.artistName}\r\n            onChange={this.handleChange}\r\n            className=\"whiteText\"\r\n            label=\"Guess the artist!\"\r\n          />\r\n          <button\r\n            onClick={this.handleSubmit}\r\n            className=\"buttonClass\"\r\n          >\r\n            Check\r\n          </button>\r\n        </MDBCardBody>\r\n      </MDBCard>\r\n    );\r\n  }\r\n}\r\nFlippingCardFront.propTypes = {\r\n  item: PropTypes.object,\r\n  progress_ms: PropTypes.number,\r\n  toggleFlip: PropTypes.func,\r\n  setUserInput: PropTypes.func,\r\n};\r\nexport default FlippingCardFront;\r\n","import { MDBContainer } from \"mdbreact\";\r\nimport PropTypes from \"prop-types\";\r\nimport React, { Component } from \"react\";\r\nimport \"./Card.css\";\r\nimport FlippingCardBack from \"../flipping-card/FlippingCardBack\";\r\nimport FlippingCardFront from \"../flipping-card/FlippingCardFront\";\r\nclass Card extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      flipped: false,\r\n      songName: \"\",\r\n      artistName: \"\",\r\n      songSimilarity: 0,\r\n      artistSimilarity: 0,\r\n    };\r\n    this.toggleFlip = this.toggleFlip.bind(this);\r\n    this.setUserInput = this.setUserInput.bind(this);\r\n  }\r\n  toggleFlip() {\r\n    console.log(\"flip\");\r\n    this.setState({ flipped: !this.state.flipped });\r\n  }\r\n  setUserInput(_songName, _artistName) {\r\n    this.setState({\r\n      songName: _songName,\r\n      artistName: _artistName,\r\n      songSimilarity: this.calculateSimilar(this.props.item.name, _songName),\r\n      artistSimilarity: this.calculateSimilar(\r\n        this.props.item.album.artists[0].name,\r\n        _artistName\r\n      ),\r\n    });\r\n  }\r\n\r\n  countLetters(input) {\r\n    var dict = {};\r\n    for (const letter of input) {\r\n      dict[letter] = (dict[letter] || 0) + 1;\r\n    }\r\n    return dict;\r\n  }\r\n  calculateSimilar(actual, input) {\r\n    console.log(\"Inside clacualte similar\");\r\n    if (actual === undefined || input === undefined) return 0;\r\n    let sum = 0;\r\n    let dif = 0;\r\n    console.log(\"actual is \" + actual);\r\n    console.log(\"input is \" + input);\r\n    let actualDict = this.countLetters(actual.toLowerCase());\r\n    let inputDict = this.countLetters(input.toLowerCase());\r\n    console.log(\"dict is + \" + actual + \" \" + JSON.stringify(actualDict));\r\n    console.log(\"inputDict is \" + input + \" \" + JSON.stringify(inputDict));\r\n\r\n\r\n    for (const [key, value] of Object.entries(actualDict)) {\r\n      if (key in inputDict) {\r\n        dif += Math.abs(value - inputDict[key]);\r\n      } else {\r\n        dif += value;\r\n      }\r\n      sum += value;\r\n    }\r\n\r\n    return Math.round(((sum - dif) / sum) * 100);\r\n  }\r\n  render() {\r\n    return (\r\n      <MDBContainer\r\n        style={{\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <div\r\n          className={\"card-container\" + (this.state.flipped ? \" flipped\" : \"\")}\r\n        >\r\n          <FlippingCardFront\r\n            toggleFlip={this.toggleFlip}\r\n            setUserInput={this.setUserInput}\r\n            item={this.props.item}\r\n            progress_ms={this.props.progress_ms}\r\n          />\r\n          <FlippingCardBack\r\n            toggleFlip={this.toggleFlip}\r\n            inputSongName={this.state.songName}\r\n            inputArtistName={this.state.artistName}\r\n            songName={this.props.item.name}\r\n            artistName={this.props.item.album.artists[0].name}\r\n            songSimilarity={this.state.songSimilarity}\r\n            artistSimilarity={this.state.artistSimilarity}\r\n          ></FlippingCardBack>\r\n        </div>\r\n      </MDBContainer>\r\n    );\r\n  }\r\n}\r\nCard.propTypes = {\r\n  item: PropTypes.object,\r\n  progress_ms: PropTypes.number,\r\n  spotifyAPI: PropTypes.func,\r\n};\r\nexport default Card;\r\n","import axios from \"axios\";\r\nimport PropTypes from 'prop-types';\r\nimport React from \"react\";\r\nimport Card from '../card/Card.jsx';\r\n\r\nclass LandingPage extends React.Component {\r\n\r\n  componentDidMount() {\r\n    this.interval = setInterval(\r\n      () => this.getCurrentlyPlaying(this.props.token),\r\n      1000\r\n    );\r\n  }\r\n  componentWillUnmount() {\r\n    clearInterval(this.getCurrentlyPlaying);\r\n  }\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      token: null,\r\n      item: null,\r\n      is_playing: false,\r\n      progress_ms: 0,\r\n    };\r\n    this.getCurrentlyPlaying = this.getCurrentlyPlaying.bind(this);\r\n    this.getSpotifyAPI = this.getSpotifyAPI.bind(this);\r\n  }\r\n  getSpotifyAPI(token) {\r\n    return axios.create({\r\n      baseURL: \"https://api.spotify.com\",\r\n      headers: { Authorization: \"Bearer \" + token},\r\n    });\r\n  }\r\n  getCurrentlyPlaying() {\r\n    this.getSpotifyAPI(this.props.token)\r\n      .get(\"/v1/me/player/currently-playing\")\r\n      .then((response) => {\r\n        // console.log(response);\r\n        // If we are playing something\r\n        if ((response.status === 200)) {\r\n          this.setState({\r\n            item: response.data.item,\r\n            is_playing: response.data.is_playing,\r\n            progress_ms: response.data.progress_ms,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            item: null,\r\n            is_playing: false,\r\n            progress_ms: 0,\r\n          })\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.response);\r\n      });\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      this.state.item ? <Card\r\n        item={this.state.item}\r\n        is_playing={this.state.is_playing}\r\n        progress_ms={this.state.progress_ms}\r\n      /> : <div style={{\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        paddingTop: '7rem'\r\n      }}>Please play a song on Spotify</div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nLandingPage.propTypes = {\r\n  token: PropTypes.string,\r\n}\r\n\r\nexport default LandingPage;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Cookies from 'js-cookie';\r\nimport { MDBBtn } from 'mdbreact';\r\nimport { SpotifyAuth, Scopes } from 'react-spotify-auth';\r\nimport './App.css';\r\nimport LandingPage from '../landing-page/LandingPage.jsx';\r\nimport 'react-spotify-auth/dist/index.css'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nconst App = () => {\r\n  const [spotifyAuthToken, setSpotifyAuthToken] = useState();\r\n  const getSpotifyAuthToken = Cookies.get('spotifyAuthToken')\r\n  useEffect(() => {\r\n    setSpotifyAuthToken(Cookies.get('spotifyAuthToken'));\r\n  }, [getSpotifyAuthToken]);\r\n\r\n  const logout = () => {\r\n    Cookies.remove('spotifyAuthToken', {\r\n      path: '',\r\n    });\r\n    window.location = '/';\r\n  };\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"spotifyHeading\">\r\n        <h1>Spotify Guesser</h1>\r\n      </div>\r\n      <Switch>\r\n        <Route exact path=\"/artist-guesser-spotify\">\r\n          <div style={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            paddingTop: '10rem',\r\n          }}>\r\n            <SpotifyAuth\r\n              redirectUri='https://louiskueh.com/artist-guesser-spotify/play'\r\n              // redirectUri='https://localhost:3000/callback'\r\n              clientID='3770ed0bc8aa4ae6ba4dd47dec8b5fcd'\r\n              scopes={[Scopes.userReadCurrentlyPlaying]\r\n              }\r\n            />\r\n          </div>\r\n        </Route>\r\n        <Route path=\"/artist-guesser-spotify/play\">\r\n          <div>\r\n            <LandingPage token={spotifyAuthToken}></LandingPage>\r\n            {Cookies.get('spotifyAuthToken') ? <div className=\"logout\">\r\n              <MDBBtn gradient=\"aqua\" onClick={logout}>Logout</MDBBtn>\r\n            </div> : ('')}\r\n          </div>\r\n        </Route>\r\n      </Switch>\r\n\r\n    </Router>\r\n\r\n  );\r\n};\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}